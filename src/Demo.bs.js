// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as List from "rescript/lib/es6/list.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";

function findIndex(list, item) {
  var _list = list;
  var _index = 0;
  while(true) {
    var index = _index;
    var list$1 = _list;
    if (list$1) {
      if (list$1.hd === item) {
        return index;
      }
      _index = index + 1 | 0;
      _list = list$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function $$eval(expr) {
  var eval_inner = function (_expr, _env) {
    while(true) {
      var env = _env;
      var expr = _expr;
      switch (expr.TAG | 0) {
        case /* Cst */0 :
            return expr._0;
        case /* Add */1 :
            return eval_inner(expr._0, env) + eval_inner(expr._1, env) | 0;
        case /* Mul */2 :
            return Math.imul(eval_inner(expr._0, env), eval_inner(expr._1, env));
        case /* Var */3 :
            return List.assoc(expr._0, env);
        case /* Let */4 :
            _env = {
              hd: [
                expr._0,
                eval_inner(expr._1, env)
              ],
              tl: env
            };
            _expr = expr._2;
            continue ;
        case /* Fn */5 :
        case /* App */6 :
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "Demo.res",
                    31,
                    13
                  ],
                  Error: new Error()
                };
        
      }
    };
  };
  return eval_inner(expr, /* [] */0);
}

var Ast = {
  $$eval: $$eval
};

function compile(expr) {
  var compile_inner = function (expr, cenv) {
    switch (expr.TAG | 0) {
      case /* Cst */0 :
          return {
                  TAG: /* Cst */0,
                  _0: expr._0
                };
      case /* Add */1 :
          return {
                  TAG: /* Add */1,
                  _0: compile_inner(expr._0, cenv),
                  _1: compile_inner(expr._1, cenv)
                };
      case /* Mul */2 :
          return {
                  TAG: /* Mul */2,
                  _0: compile_inner(expr._0, cenv),
                  _1: compile_inner(expr._1, cenv)
                };
      case /* Var */3 :
          return {
                  TAG: /* Var */3,
                  _0: findIndex(cenv, expr._0)
                };
      case /* Let */4 :
          return {
                  TAG: /* Let */4,
                  _0: compile_inner(expr._1, cenv),
                  _1: compile_inner(expr._2, {
                        hd: expr._0,
                        tl: cenv
                      })
                };
      case /* Fn */5 :
      case /* App */6 :
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "Demo.res",
                  55,
                  13
                ],
                Error: new Error()
              };
      
    }
  };
  return compile_inner(expr, /* [] */0);
}

var Nameless = {
  compile: compile
};

function find_local_index(env, local_index) {
  var _env = env;
  var _local_index = local_index;
  var _stack_index = 0;
  while(true) {
    var stack_index = _stack_index;
    var local_index$1 = _local_index;
    var env$1 = _env;
    if (env$1) {
      if (local_index$1 !== 0) {
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      var head = env$1.hd;
      if (head === /* Slocal */0) {
        return stack_index;
      }
      _stack_index = stack_index + 1 | 0;
      _local_index = head === /* Slocal */0 ? local_index$1 - 1 | 0 : local_index$1;
      _env = env$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function compile$1(expr) {
  var go = function (expr, env) {
    switch (expr.TAG | 0) {
      case /* Cst */0 :
          return {
                  TAG: /* Cst */0,
                  _0: expr._0
                };
      case /* Add */1 :
          return {
                  TAG: /* Add */1,
                  _0: go(expr._0, env),
                  _1: go(expr._1, {
                        hd: /* Stmp */1,
                        tl: env
                      })
                };
      case /* Mul */2 :
          return {
                  TAG: /* Mul */2,
                  _0: go(expr._0, env),
                  _1: go(expr._1, {
                        hd: /* Stmp */1,
                        tl: env
                      })
                };
      case /* Var */3 :
          return {
                  TAG: /* Var */3,
                  _0: find_local_index(env, expr._0)
                };
      case /* Let */4 :
          return {
                  TAG: /* Let */4,
                  _0: go(expr._0, env),
                  _1: go(expr._1, {
                        hd: /* Slocal */0,
                        tl: env
                      })
                };
      
    }
  };
  return go(expr, /* [] */0);
}

var Indexed = {
  find_local_index: find_local_index,
  compile: compile$1
};

function $$eval$1(_instrs, _stk) {
  while(true) {
    var stk = _stk;
    var instrs = _instrs;
    if (instrs) {
      var i = instrs.hd;
      if (typeof i === "number") {
        switch (i) {
          case /* Add */0 :
              if (stk) {
                var match = stk.tl;
                if (match) {
                  _stk = {
                    hd: stk.hd + match.hd | 0,
                    tl: match.tl
                  };
                  _instrs = instrs.tl;
                  continue ;
                }
                
              }
              break;
          case /* Mul */1 :
              if (stk) {
                var match$1 = stk.tl;
                if (match$1) {
                  _stk = {
                    hd: Math.imul(stk.hd, match$1.hd),
                    tl: match$1.tl
                  };
                  _instrs = instrs.tl;
                  continue ;
                }
                
              }
              break;
          case /* Pop */2 :
              if (stk) {
                _stk = stk.tl;
                _instrs = instrs.tl;
                continue ;
              }
              break;
          case /* Swap */3 :
              if (stk) {
                var match$2 = stk.tl;
                if (match$2) {
                  _stk = {
                    hd: match$2.hd,
                    tl: {
                      hd: stk.hd,
                      tl: match$2.tl
                    }
                  };
                  _instrs = instrs.tl;
                  continue ;
                }
                
              }
              break;
          
        }
      } else {
        if (i.TAG === /* Cst */0) {
          _stk = {
            hd: i._0,
            tl: stk
          };
          _instrs = instrs.tl;
          continue ;
        }
        _stk = {
          hd: List.nth(stk, i._0),
          tl: stk
        };
        _instrs = instrs.tl;
        continue ;
      }
    } else if (stk && !stk.tl) {
      return stk.hd;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Demo.res",
            114,
            11
          ],
          Error: new Error()
        };
  };
}

function find_local_index$1(env, name) {
  var _env = env;
  var _stack_index = 0;
  while(true) {
    var stack_index = _stack_index;
    var env$1 = _env;
    if (env$1) {
      var head = env$1.hd;
      if (head) {
        if (head._0 === name) {
          return stack_index;
        }
        _stack_index = stack_index + 1 | 0;
        _env = env$1.tl;
        continue ;
      }
      _stack_index = stack_index + 1 | 0;
      _env = env$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function compile_ast(expr) {
  var compile_inner = function (expr, env) {
    switch (expr.TAG | 0) {
      case /* Cst */0 :
          return {
                  hd: {
                    TAG: /* Cst */0,
                    _0: expr._0
                  },
                  tl: /* [] */0
                };
      case /* Add */1 :
          return Belt_List.concatMany([
                      compile_inner(expr._0, env),
                      compile_inner(expr._1, {
                            hd: /* Stmp */0,
                            tl: env
                          }),
                      {
                        hd: /* Add */0,
                        tl: /* [] */0
                      }
                    ]);
      case /* Mul */2 :
          return Belt_List.concatMany([
                      compile_inner(expr._0, env),
                      compile_inner(expr._1, {
                            hd: /* Stmp */0,
                            tl: env
                          }),
                      {
                        hd: /* Mul */1,
                        tl: /* [] */0
                      }
                    ]);
      case /* Var */3 :
          return {
                  hd: {
                    TAG: /* Var */1,
                    _0: find_local_index$1(env, expr._0)
                  },
                  tl: /* [] */0
                };
      case /* Let */4 :
          return Belt_List.concatMany([
                      compile_inner(expr._1, env),
                      compile_inner(expr._2, {
                            hd: /* Slocal */{
                              _0: expr._0
                            },
                            tl: env
                          }),
                      {
                        hd: /* Swap */3,
                        tl: {
                          hd: /* Pop */2,
                          tl: /* [] */0
                        }
                      }
                    ]);
      case /* Fn */5 :
      case /* App */6 :
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "Demo.res",
                  143,
                  13
                ],
                Error: new Error()
              };
      
    }
  };
  return compile_inner(expr, /* [] */0);
}

function compile_indexed(expr) {
  switch (expr.TAG | 0) {
    case /* Cst */0 :
        return {
                hd: {
                  TAG: /* Cst */0,
                  _0: expr._0
                },
                tl: /* [] */0
              };
    case /* Add */1 :
        return Belt_List.concatMany([
                    compile_indexed(expr._0),
                    compile_indexed(expr._1),
                    {
                      hd: /* Add */0,
                      tl: /* [] */0
                    }
                  ]);
    case /* Mul */2 :
        return Belt_List.concatMany([
                    compile_indexed(expr._0),
                    compile_indexed(expr._1),
                    {
                      hd: /* Mul */1,
                      tl: /* [] */0
                    }
                  ]);
    case /* Var */3 :
        return {
                hd: {
                  TAG: /* Var */1,
                  _0: expr._0
                },
                tl: /* [] */0
              };
    case /* Let */4 :
        return Belt_List.concatMany([
                    compile_indexed(expr._0),
                    compile_indexed(expr._1),
                    {
                      hd: /* Swap */3,
                      tl: {
                        hd: /* Pop */2,
                        tl: /* [] */0
                      }
                    }
                  ]);
    
  }
}

function print(instrs) {
  for(var i = 1 ,i_finish = List.length(instrs); i <= i_finish; ++i){
    var i$1 = List.nth(instrs, i - 1 | 0);
    var instr_text;
    if (typeof i$1 === "number") {
      switch (i$1) {
        case /* Add */0 :
            instr_text = "add";
            break;
        case /* Mul */1 :
            instr_text = "mul";
            break;
        case /* Pop */2 :
            instr_text = "pop";
            break;
        case /* Swap */3 :
            instr_text = "swap";
            break;
        
      }
    } else {
      instr_text = i$1.TAG === /* Cst */0 ? "const " + String(i$1._0) : "var " + String(i$1._0);
    }
    console.log(instr_text);
  }
}

var Vm = {
  $$eval: $$eval$1,
  find_local_index: find_local_index$1,
  compile_ast: compile_ast,
  compile_indexed: compile_indexed,
  print: print
};

function compile_vm(instrs) {
  var compile_inner = function (instrs) {
    if (!instrs) {
      return /* [] */0;
    }
    var i = instrs.hd;
    if (typeof i !== "number") {
      if (i.TAG === /* Cst */0) {
        return {
                hd: {
                  TAG: /* Mov */0,
                  _0: /* Rax */0,
                  _1: {
                    TAG: /* Constant */0,
                    _0: i._0
                  }
                },
                tl: {
                  hd: {
                    TAG: /* Push */1,
                    _0: /* Rax */0
                  },
                  tl: compile_inner(instrs.tl)
                }
              };
      } else {
        return {
                hd: {
                  TAG: /* Mov */0,
                  _0: /* Rbx */1,
                  _1: {
                    TAG: /* Constant */0,
                    _0: i._0
                  }
                },
                tl: {
                  hd: {
                    TAG: /* Mov */0,
                    _0: /* Rax */0,
                    _1: {
                      TAG: /* RegOffset */3,
                      base: /* Rsp */4,
                      index: /* Rbx */1,
                      scale: 8,
                      disp: 0
                    }
                  },
                  tl: {
                    hd: {
                      TAG: /* Push */1,
                      _0: /* Rax */0
                    },
                    tl: compile_inner(instrs.tl)
                  }
                }
              };
      }
    }
    switch (i) {
      case /* Add */0 :
          return {
                  hd: {
                    TAG: /* Pop */2,
                    _0: /* Rax */0
                  },
                  tl: {
                    hd: {
                      TAG: /* Pop */2,
                      _0: /* Rbx */1
                    },
                    tl: {
                      hd: {
                        TAG: /* Add */3,
                        _0: /* Rax */0,
                        _1: /* Rbx */1
                      },
                      tl: {
                        hd: {
                          TAG: /* Push */1,
                          _0: /* Rax */0
                        },
                        tl: compile_inner(instrs.tl)
                      }
                    }
                  }
                };
      case /* Mul */1 :
          return {
                  hd: {
                    TAG: /* Pop */2,
                    _0: /* Rax */0
                  },
                  tl: {
                    hd: {
                      TAG: /* Pop */2,
                      _0: /* Rbx */1
                    },
                    tl: {
                      hd: {
                        TAG: /* Mul */4,
                        _0: /* Rbx */1
                      },
                      tl: {
                        hd: {
                          TAG: /* Push */1,
                          _0: /* Rax */0
                        },
                        tl: compile_inner(instrs.tl)
                      }
                    }
                  }
                };
      case /* Pop */2 :
          return {
                  hd: {
                    TAG: /* Pop */2,
                    _0: /* Rax */0
                  },
                  tl: compile_inner(instrs.tl)
                };
      case /* Swap */3 :
          var tail = instrs.tl;
          if (tail && tail.hd === 2) {
            return {
                    hd: {
                      TAG: /* Pop */2,
                      _0: /* Rax */0
                    },
                    tl: {
                      hd: {
                        TAG: /* Pop */2,
                        _0: /* Rbx */1
                      },
                      tl: {
                        hd: {
                          TAG: /* Push */1,
                          _0: /* Rax */0
                        },
                        tl: compile_inner(tail.tl)
                      }
                    }
                  };
          }
          return {
                  hd: {
                    TAG: /* Pop */2,
                    _0: /* Rax */0
                  },
                  tl: {
                    hd: {
                      TAG: /* Pop */2,
                      _0: /* Rbx */1
                    },
                    tl: {
                      hd: {
                        TAG: /* Push */1,
                        _0: /* Rax */0
                      },
                      tl: {
                        hd: {
                          TAG: /* Push */1,
                          _0: /* Rbx */1
                        },
                        tl: compile_inner(tail)
                      }
                    }
                  }
                };
      
    }
  };
  return Belt_List.concatMany([
              compile_inner(instrs),
              {
                hd: {
                  TAG: /* Pop */2,
                  _0: /* Rax */0
                },
                tl: {
                  hd: /* Ret */0,
                  tl: /* [] */0
                }
              }
            ]);
}

function optimize(instrs) {
  var optimize_inner = function (_instrs) {
    while(true) {
      var instrs = _instrs;
      if (!instrs) {
        return /* [] */0;
      }
      var head = instrs.hd;
      if (typeof head !== "number" && head.TAG === /* Push */1 && head._0 === 0) {
        var match = instrs.tl;
        if (match) {
          var match$1 = match.hd;
          if (typeof match$1 !== "number" && match$1.TAG === /* Pop */2 && match$1._0 === 0) {
            _instrs = match.tl;
            continue ;
          }
          
        }
        
      }
      return {
              hd: head,
              tl: optimize_inner(instrs.tl)
            };
    };
  };
  var _instrs = instrs;
  while(true) {
    var instrs$1 = _instrs;
    var o = optimize_inner(instrs$1);
    if (Belt_List.length(o) === Belt_List.length(instrs$1)) {
      return o;
    }
    _instrs = o;
    continue ;
  };
}

function to_little_endian_32(i) {
  var b1 = i & 255;
  var b2 = (i >>> 8) & 255;
  var b3 = (i >>> 16) & 255;
  var b4 = (i >>> 24) & 255;
  return {
          hd: b1,
          tl: {
            hd: b2,
            tl: {
              hd: b3,
              tl: {
                hd: b4,
                tl: /* [] */0
              }
            }
          }
        };
}

function generate(instrs) {
  var generate_instr = function (instr) {
    if (typeof instr === "number") {
      return {
              hd: 195,
              tl: /* [] */0
            };
    }
    switch (instr.TAG | 0) {
      case /* Mov */0 :
          var i = instr._1;
          var reg = instr._0;
          switch (i.TAG | 0) {
            case /* Constant */0 :
                var i$1 = i._0;
                if (i$1 < 2147483647) {
                  var tmp;
                  switch (reg) {
                    case /* Rax */0 :
                        tmp = 192;
                        break;
                    case /* Rbx */1 :
                        tmp = 195;
                        break;
                    case /* Rcx */2 :
                        tmp = 193;
                        break;
                    case /* Rdx */3 :
                        tmp = 194;
                        break;
                    case /* Rsp */4 :
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "Demo.res",
                                246,
                                17
                              ],
                              Error: new Error()
                            };
                    
                  }
                  return {
                          hd: 72,
                          tl: {
                            hd: 199,
                            tl: {
                              hd: tmp,
                              tl: to_little_endian_32(i$1)
                            }
                          }
                        };
                }
                break;
            case /* Reg */1 :
            case /* Addr */2 :
                break;
            case /* RegOffset */3 :
                if (i.scale === 8) {
                  var disp = i.disp;
                  if (disp < 128) {
                    if (i.base >= 4) {
                      var tmp$1;
                      switch (reg) {
                        case /* Rax */0 :
                            tmp$1 = 68;
                            break;
                        case /* Rbx */1 :
                            tmp$1 = 92;
                            break;
                        case /* Rcx */2 :
                            tmp$1 = 76;
                            break;
                        case /* Rdx */3 :
                            tmp$1 = 84;
                            break;
                        case /* Rsp */4 :
                            throw {
                                  RE_EXN_ID: "Assert_failure",
                                  _1: [
                                    "Demo.res",
                                    261,
                                    19
                                  ],
                                  Error: new Error()
                                };
                        
                      }
                      var tmp$2;
                      switch (i.index) {
                        case /* Rax */0 :
                            tmp$2 = 196;
                            break;
                        case /* Rbx */1 :
                            tmp$2 = 220;
                            break;
                        case /* Rcx */2 :
                            tmp$2 = 204;
                            break;
                        case /* Rdx */3 :
                            tmp$2 = 212;
                            break;
                        case /* Rsp */4 :
                            throw {
                                  RE_EXN_ID: "Assert_failure",
                                  _1: [
                                    "Demo.res",
                                    268,
                                    19
                                  ],
                                  Error: new Error()
                                };
                        
                      }
                      return {
                              hd: 72,
                              tl: {
                                hd: 139,
                                tl: {
                                  hd: tmp$1,
                                  tl: {
                                    hd: tmp$2,
                                    tl: {
                                      hd: disp,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            };
                    }
                    throw {
                          RE_EXN_ID: "Assert_failure",
                          _1: [
                            "Demo.res",
                            272,
                            15
                          ],
                          Error: new Error()
                        };
                  }
                  
                }
                break;
            
          }
          break;
      case /* Push */1 :
          switch (instr._0) {
            case /* Rax */0 :
                return {
                        hd: 80,
                        tl: /* [] */0
                      };
            case /* Rbx */1 :
                return {
                        hd: 83,
                        tl: /* [] */0
                      };
            case /* Rcx */2 :
                return {
                        hd: 81,
                        tl: /* [] */0
                      };
            case /* Rdx */3 :
                return {
                        hd: 82,
                        tl: /* [] */0
                      };
            case /* Rsp */4 :
                break;
            
          }
          break;
      case /* Pop */2 :
          switch (instr._0) {
            case /* Rax */0 :
                return {
                        hd: 88,
                        tl: /* [] */0
                      };
            case /* Rbx */1 :
                return {
                        hd: 91,
                        tl: /* [] */0
                      };
            case /* Rcx */2 :
                return {
                        hd: 89,
                        tl: /* [] */0
                      };
            case /* Rdx */3 :
                return {
                        hd: 90,
                        tl: /* [] */0
                      };
            case /* Rsp */4 :
                break;
            
          }
          break;
      case /* Add */3 :
          if (instr._0 === 0 && instr._1 === 1) {
            return {
                    hd: 72,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 216,
                        tl: /* [] */0
                      }
                    }
                  };
          }
          break;
      case /* Mul */4 :
          if (instr._0 === 1) {
            return {
                    hd: 72,
                    tl: {
                      hd: 247,
                      tl: {
                        hd: 227,
                        tl: /* [] */0
                      }
                    }
                  };
          }
          break;
      
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Demo.res",
            285,
            13
          ],
          Error: new Error()
        };
  };
  var generate_inner = function (instrs) {
    if (instrs) {
      return Belt_List.concatMany([
                  generate_instr(instrs.hd),
                  generate_inner(instrs.tl)
                ]);
    } else {
      return /* [] */0;
    }
  };
  return generate_inner(instrs);
}

function to_hex(code) {
  return Belt_List.reduce(code, "", (function (sum, item) {
                return sum + ("00" + item.toString(16)).slice(-2);
              }));
}

function to_reg_str(reg) {
  switch (reg) {
    case /* Rax */0 :
        return "rax";
    case /* Rbx */1 :
        return "rbx";
    case /* Rcx */2 :
        return "rcx";
    case /* Rdx */3 :
        return "rdx";
    case /* Rsp */4 :
        return "rsp";
    
  }
}

function to_mov_arg_str(reg) {
  switch (reg.TAG | 0) {
    case /* Constant */0 :
        return String(reg._0);
    case /* Reg */1 :
        return to_reg_str(reg._0);
    case /* Addr */2 :
        return "[" + String(reg._0) + "]";
    case /* RegOffset */3 :
        return "[" + to_reg_str(reg.base) + "+" + to_reg_str(reg.index) + "*" + String(reg.scale) + "+" + String(reg.disp) + "]";
    
  }
}

function print$1(instrs) {
  for(var i = 1 ,i_finish = List.length(instrs); i <= i_finish; ++i){
    var reg = List.nth(instrs, i - 1 | 0);
    var instr_text;
    if (typeof reg === "number") {
      instr_text = "ret";
    } else {
      switch (reg.TAG | 0) {
        case /* Mov */0 :
            instr_text = "mov " + to_reg_str(reg._0) + ", " + to_mov_arg_str(reg._1);
            break;
        case /* Push */1 :
            instr_text = "push " + to_reg_str(reg._0);
            break;
        case /* Pop */2 :
            instr_text = "pop " + to_reg_str(reg._0);
            break;
        case /* Add */3 :
            instr_text = "add " + to_reg_str(reg._0) + ", " + to_reg_str(reg._1);
            break;
        case /* Mul */4 :
            instr_text = "mul " + to_reg_str(reg._0);
            break;
        
      }
    }
    console.log(instr_text);
  }
}

var Native = {
  compile_vm: compile_vm,
  optimize: optimize,
  to_little_endian_32: to_little_endian_32,
  generate: generate,
  to_hex: to_hex,
  to_reg_str: to_reg_str,
  to_mov_arg_str: to_mov_arg_str,
  print: print$1
};

var my_expr = {
  TAG: /* Mul */2,
  _0: {
    TAG: /* Cst */0,
    _0: 3
  },
  _1: {
    TAG: /* Add */1,
    _0: {
      TAG: /* Add */1,
      _0: {
        TAG: /* Cst */0,
        _0: 10086
      },
      _1: {
        TAG: /* Let */4,
        _0: "x",
        _1: {
          TAG: /* Cst */0,
          _0: 2
        },
        _2: {
          TAG: /* Add */1,
          _0: {
            TAG: /* Var */3,
            _0: "x"
          },
          _1: {
            TAG: /* Var */3,
            _0: "x"
          }
        }
      }
    },
    _1: {
      TAG: /* Cst */0,
      _0: 3
    }
  }
};

var my_nameless = compile(my_expr);

var my_indexed = compile$1(my_nameless);

var instrs = compile_indexed(my_indexed);

var instrs2 = compile_ast(my_expr);

var assembly = optimize(compile_vm(instrs2));

console.log("==> multi-level ir:");

print(instrs);

console.log("==> single pass:");

print(instrs2);

console.log($$eval(my_expr));

console.log($$eval$1(instrs, /* [] */0));

console.log($$eval$1(instrs2, /* [] */0));

console.log("==> native ir:");

print$1(assembly);

console.log("==> machine code:");

var machine_code = to_hex(generate(assembly));

console.log(machine_code);

Fs.writeFileSync("machine_code.bin", machine_code, "hex");

export {
  findIndex ,
  Ast ,
  Nameless ,
  Indexed ,
  Vm ,
  Native ,
  my_expr ,
  my_nameless ,
  my_indexed ,
  instrs ,
  instrs2 ,
  assembly ,
  machine_code ,
}
/* my_nameless Not a pure module */
